{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","getUser","userId","usersFromServer","find","App","useState","setTitle","validTitle","setValidTitle","setUserId","validUser","setValidUser","setFieldValue","event","target","value","Error","action","method","onSubmit","preventDefault","newTodo","Math","max","trim","push","type","placeholder","onChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a93f4d91.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\n\nimport { User } from '../../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../../types/Todo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    user,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={\n        classNames(\n          'TodoInfo',\n          {\n            'TodoInfo--completed': completed,\n          },\n        )\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user ? <UserInfo user={user} /> : null}\n\n    </article>\n  );\n};\n","import React from 'react';\n\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from '../types/User';\nimport { Todo } from '../types/Todo';\nimport { TodoList } from './components/TodoList/index';\n\nfunction getUser(userId: number): User | null {\n  const foundedUser = usersFromServer.find(user => user.id === userId);\n\n  return foundedUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [validTitle, setValidTitle] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [validUser, setValidUser] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const maxId = Math.max(...todos.map(todo => todo.id));\n\n    const newTodo = {\n      id: maxId + 1,\n      title,\n      completed: false,\n      userId,\n      user: getUser(userId),\n    };\n\n    if (!userId) {\n      setValidUser(true);\n    }\n\n    if (!title.trim()) {\n      setValidTitle(true);\n    }\n\n    if (userId && title.trim()) {\n      todos.push(newTodo);\n      setUserId(0);\n      setTitle('');\n      setValidUser(false);\n      setValidTitle(false);\n    }\n  };\n\n  type Props =\n    React.ChangeEvent<HTMLSelectElement> | React.ChangeEvent<HTMLInputElement>;\n\n  const setFieldValue = (event: Props) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'title':\n        setTitle(value);\n        setValidTitle(false);\n\n        break;\n\n      case 'userId':\n        setUserId(+value);\n        setValidUser(false);\n\n        break;\n\n      default:\n        throw new Error(`The title cannot start with a space.\n        Enter a valid title and select a user`);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              name=\"title\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={setFieldValue}\n            />\n          </label>\n\n          {validTitle && <span className=\"error\">Please enter a title</span>}\n\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={userId}\n              name=\"userId\"\n              onChange={setFieldValue}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n\n              {usersFromServer.map(({ id, name }) => {\n                return (\n                  <option\n                    value={id}\n                    key={id}\n                  >\n                    {name}\n                  </option>\n                );\n              })}\n            </select>\n          </label>\n\n          {validUser && <span className=\"error\">Please choose a user</span>}\n\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n\n    </div>\n  );\n};\n\n// import './App.scss';\n\n// // import usersFromServer from './api/users';\n// // import todosFromServer from './api/todos';\n\n// export const App = () => {\n//   return (\n//     <div className=\"App\">\n//       <h1>Add todo form</h1>\n\n//       <form action=\"/api/users\" method=\"POST\">\n//         <div className=\"field\">\n//           <input type=\"text\" data-cy=\"titleInput\" />\n//           <span className=\"error\">Please enter a title</span>\n//         </div>\n\n//         <div className=\"field\">\n//           <select data-cy=\"userSelect\">\n//             <option value=\"0\" disabled>Choose a user</option>\n//           </select>\n\n//           <span className=\"error\">Please choose a user</span>\n//         </div>\n\n//         <button type=\"submit\" data-cy=\"submitButton\">\n//           Add\n//         </button>\n//       </form>\n\n//       <section className=\"TodoList\">\n//         <article data-id=\"1\" className=\"TodoInfo TodoInfo--completed\">\n//           <h2 className=\"TodoInfo__title\">\n//             delectus aut autem\n//           </h2>\n\n//           <a className=\"UserInfo\" href=\"mailto:Sincere@april.biz\">\n//             Leanne Graham\n//           </a>\n//         </article>\n\n//         <article data-id=\"15\" className=\"TodoInfo TodoInfo--completed\">\n//           <h2 className=\"TodoInfo__title\">delectus aut autem</h2>\n\n//           <a className=\"UserInfo\" href=\"mailto:Sincere@april.biz\">\n//             Leanne Graham\n//           </a>\n//         </article>\n\n//         <article data-id=\"2\" className=\"TodoInfo\">\n//           <h2 className=\"TodoInfo__title\">\n//             quis ut nam facilis et officia qui\n//           </h2>\n\n//           <a className=\"UserInfo\" href=\"mailto:Julianne.OConner@kory.org\">\n//             Patricia Lebsack\n//           </a>\n//         </article>\n//       </section>\n//     </div>\n//   );\n// };\n// import { useState } from 'react';\n\n// import './App.scss';\n\n// import usersFromServer from './api/users';\n// import todosFromServer from './api/todos';\n\n// import { User } from '../types/User';\n// import { Todo } from '../types/Todo';\n// import { TodoList } from './components/TodoList/index';\n\n// function getUser(userId: number): User | null {\n//   const foundedUser = usersFromServer.find(user => user.id === userId);\n\n//   return foundedUser || null;\n// }\n\n// export const todos: Todo[] = todosFromServer.map(todo => ({\n//   ...todo,\n//   user: getUser(todo.userId),\n// }));\n\n// // console.log(todos);\n// export const App = () => {\n//   const [title, setTitle] = useState('');\n//   const [validTitle, setValidTitle] = useState(false);\n//   const [userId, setUserId] = useState(0);\n//   const [validUser, setValidUser] = useState(false);\n//   // const [sendForm, setSendForm] = useState(true);\n//   // напиши обект или стейт в котором к старому массиву должен прибовлятся новый объект с новой тудушкой\n//   // console.log(title);\n\n//   const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n//     event.preventDefault();\n//     // console.log(event);\n//     // пустого ввода быть не может так как\n//     // у меня по умолчанию пустая строка стоит\n//     // if (!title) {\n//     //   setValidTitle(false);\n//     // }\n//     const lastMaxId = Math.max(...todos.map(todo => todo.id));\n//     // console.log(lastMaxId);\n\n//     const newTodo = {\n//       id: lastMaxId + 1,\n//       title,\n//       completed: false,\n//       // посмотри разницу между userId и user\n//       // и как тудушки делаются\n//       userId,\n//       user: getUser(userId),\n//     };\n\n//     if (!userId) {\n//       setValidUser(true);\n//     }\n\n//     if (!title.trim()) {\n//       setValidTitle(true);\n//     }\n\n// это условие проверяет наличие 2х полей вместе\n// спроси почему без этого условия не работает\n// и что и куда ретерн возвращает\n// если без этого условия то я могу вводить что угодно\n// но после правильного ввода повылазят все неправильные попытки\n// тут нужен ретерн чтобы не доходило до кода что ниже\n// так как внизу и отображение нового объекта так и сброс полей\n// и самое важное сброс валидации то есть ставит на фолз снова\n// и получается что без этого условия, условия на валидацию срабатывают\n// но их ефект перекрывает то что ниже, то есть сброс\n// if (!userId || !title.trim()) {\n//   return;\n// }\n\n//     // console.log(event);\n//     // console.log('submit');\n//     // setSendForm(true);\n//     // setSendForm(state => {\n//     //   console.log(state);\n//     //   return state\n//     // });\n//     // после каждого нажатия все ставится на исходную и инпут и селект\n//     // чистится на исходные значения\n//     todos.push(newTodo);\n//     setUserId(0);\n//     setTitle('');\n//     setValidTitle(false);\n//     setValidUser(false);\n//   };\n\n//   const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     const { value } = event.target;\n\n//     setTitle(value);\n//     setValidTitle(false);\n//   };\n\n//   const handleUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n//     const { value } = event.target;\n\n//     setUserId(+value);\n//     setValidUser(false);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Add todo form</h1>\n\n//       <form\n//         action=\"/api/users\"\n//         method=\"POST\"\n//         onSubmit={handleSubmit}\n//       >\n//         <div className=\"field\">\n//           <label>\n//             {'Title: '}\n//             <input\n//               type=\"text\"\n//               data-cy=\"titleInput\"\n//               placeholder=\"Enter a title\"\n//               // походу тут и в селект нужен value чтобы оно в ноль сбрасывало\n//               // то что ввели\n//               value={title}\n//               onChange={handleTitle}\n//             />\n//           </label>\n\n//           {/* {!title ? (\n//             <span className=\"error\">Please enter a title</span>\n//           ) : null} */}\n//           {/* {!sendForm ? (\n//             <span className=\"error\">Please enter a title</span>\n//           ) : null} */}\n//           {/* {sendForm || (\n//             <span className=\"error\">Please enter a title</span>\n//           )} */}\n//           {validTitle && <span className=\"error\">Please enter a title</span>}\n\n//           {/* <span className=\"error\">Please enter a title</span> */}\n//         </div>\n\n//         <div className=\"field\">\n//           <label>\n//             {'User: '}\n//             <select\n//               data-cy=\"userSelect\"\n//               value={userId}\n//               onChange={handleUser}\n//             >\n//               <option value=\"0\" disabled>Choose a user</option>\n\n//               {usersFromServer.map(({ id, name }) => {\n//                 return (\n//                   <option\n//                     value={id}\n//                     key={id}\n//                   >\n//                     {name}\n//                   </option>\n//                 );\n//               })}\n//             </select>\n//           </label>\n//           {validUser && <span className=\"error\">Please choose a user</span>}\n//           {/* <span className=\"error\">Please choose a user</span> */}\n//         </div>\n\n//         <button type=\"submit\" data-cy=\"submitButton\">\n//           Add\n//         </button>\n//       </form>\n\n//       <TodoList todos={todos} />\n\n//     </div>\n//   );\n// };\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}